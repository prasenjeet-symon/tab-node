{"version":3,"file":"index.js","sources":["../../lib/database-types.ts","../../lib/function-type.ts","../../lib/utils.ts"],"sourcesContent":["// Appwrite collections\r\nexport abstract class AppwriteCollection {\r\n  public static readonly USERS = 'USERS';\r\n  public static readonly BADGES = 'BADGES';\r\n  public static readonly TOPICS = 'TOPICS';\r\n  public static readonly ARTICLES = 'ARTICLES';\r\n  public static readonly COMMENTS = 'COMMENTS';\r\n  public static readonly LIKES = 'LIKES';\r\n  public static readonly ADDRESSES = 'ADDRESSES';\r\n  public static readonly SAVED_ARTICLES = 'SAVED_ARTICLES';\r\n  public static readonly ARTICLE_READERS = 'ARTICLE_READERS';\r\n  public static readonly BADGE_CHALLENGES = 'BADGE_CHALLENGES';\r\n  public static readonly USER_RELATIONSHIPS = 'USER_RELATIONSHIPS';\r\n  public static readonly USER_TOPIC_RELATIONSHIPS = 'USER_TOPIC_RELATIONSHIPS';\r\n  public static readonly ARTICLE_TOPIC_RELATIONSHIPS = 'ARTICLE_TOPIC_RELATIONSHIPS';\r\n  public static readonly USER_RELATION_SUGGESTIONS = 'USER_RELATION_SUGGESTIONS';\r\n  public static readonly USER_ARTICLE_SUGGESTIONS = 'USER_ARTICLE_SUGGESTIONS';\r\n  public static readonly USER_ARTICLE_SUGGESTIONS_COPY = 'USER_ARTICLE_SUGGESTIONS_COPY';\r\n  public static readonly USER_ACTIVITIES = 'USER_ACTIVITIES';\r\n  public static readonly USER_NOTIFICATIONS = 'USER_NOTIFICATIONS';\r\n  public static readonly SPONSORS = 'SPONSORS';\r\n  public static readonly DRAFTED_ARTICLES = 'DRAFTED_ARTICLES';\r\n  public static readonly TRANSACTIONS = 'TRANSACTIONS';\r\n  public static readonly ARTICLE_STORIES = 'ARTICLE_STORIES';\r\n  public static readonly ARTICLE_SERIES = 'ARTICLE_SERIES';\r\n  public static readonly ARTICLE_STORIES_DISTRIBUTION = 'ARTICLE_STORIES_DISTRIBUTION';\r\n  public static readonly USER_SOCIAL_LINKS = 'USER_SOCIAL_LINKS';\r\n  public static readonly ARTICLES_DISTRIBUTION = 'ARTICLES_DISTRIBUTION';\r\n  public static readonly ARTICLES_DISTRIBUTION_CLONE = 'ARTICLES_DISTRIBUTION_CLONE';\r\n}\r\n/**\r\n *\r\n * For the badges\r\n *\r\n */\r\nexport namespace MBadge {\r\n  export interface SBadge {\r\n    docID: string; // UUID max length of 36\r\n    name: string; // max length of 30\r\n  }\r\n\r\n  export interface STrend {\r\n    numberOfParticipants: number; // IntegerField\r\n    numberOfWinner: number; // IntegerField\r\n    numberOfLoser: number; //  IntegerField\r\n  }\r\n\r\n  export interface DBadge {\r\n    name: string; // max length of 30\r\n    description: string; // max length of 255\r\n    color: string; // hexadecimal max length 8\r\n    logo: string; // URL max length of 255\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    trend: STrend;\r\n  }\r\n\r\n  export interface IBadge {\r\n    id: string;\r\n    doc: DBadge;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the topics\r\n *\r\n */\r\nexport namespace MTopic {\r\n  export interface STopic {\r\n    docID: string;\r\n    name: string;\r\n    color: string;\r\n    logo: string;\r\n  }\r\n\r\n  interface STrend {\r\n    numberOfArticles: number; // IntegerField\r\n    boostPoint: number; // FloatField\r\n    resetDate: Date;\r\n  }\r\n\r\n  export interface DTopic {\r\n    name: string; // max length of 30\r\n    logo: string; // URL max length of 255\r\n    color: string; // hexadecimal max length 8\r\n    description: string; // max length of 255\r\n    weeklyTrend: STrend;\r\n    monthlyTrend: STrend;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    associatedUsersCount: number; // IntegerField\r\n  }\r\n\r\n  export interface ITopic {\r\n    id: string;\r\n    doc: DTopic;\r\n    isSelected?: boolean;\r\n    ofNetwork?: boolean;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the addresses\r\n *\r\n */\r\nexport namespace MAddress {\r\n  export interface SAddress {\r\n    docID: string; // UUID max length of 36\r\n    address: string; // max length of 255\r\n  }\r\n\r\n  export interface DAddress {\r\n    street: string; // max length of 255\r\n    city: string; // max length of 255\r\n    landmark?: string; // max length of 255\r\n    state: string; // max length of 255\r\n    country: string; // max length of 255\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    zipCode: string; // max length of 255\r\n    addressOf: MUser.SUser;\r\n  }\r\n\r\n  export interface IAddress {\r\n    id: string;\r\n    doc: DAddress;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * For the USERS\r\n *\r\n */\r\nexport namespace MUser {\r\n  export interface SUser {\r\n    fullName: string; // / max length of 30\r\n    profilePic: string; // URL max length of 255\r\n    aboutMe: string; // max length of 255\r\n    docID: string; //  UUID max length of 36\r\n  }\r\n\r\n  interface STrend {\r\n    numberOfTopics: number; // IntegerField\r\n    numberOfArticles: number; // IntegerField\r\n    numberOfComments: number; // IntegerField\r\n    numberOfLikes: number; // IntegerField\r\n    numberOfDislikes: number; // IntegerField\r\n    numberOfRead: number; // IntegerField\r\n    numberOfSaved: number; // IntegerField\r\n    numberOfClick: number; // IntegerField\r\n    numberOfShare: number; // IntegerField\r\n    boostPoint: number; // FloatField\r\n    resetDate: Date;\r\n  }\r\n\r\n  export interface DUser {\r\n    fullName: string; // / max length of 30\r\n    email: string; // max length of 255\r\n    aboutMe: string; //  max length of 255\r\n    mobile: string; // max length of 12\r\n    isActive: boolean;\r\n    profilePic: string; // URL max length of 255\r\n    address: MAddress.SAddress;\r\n    trend: STrend;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n  }\r\n\r\n  export interface IUser {\r\n    id: string;\r\n    doc: DUser;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the article series\r\n *\r\n */\r\nexport namespace MArticleSeries {\r\n  export interface SArticleSeries {\r\n    docID: string; // UUID max length of 36\r\n    name: string; // max length of 30\r\n  }\r\n\r\n  export interface DArticleSeries {\r\n    name: string; // max length of 30\r\n    description: string; // max length of 255\r\n    coverImage: string; // URL max length of 255\r\n    numberOfArticles: number; // IntegerField\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n  }\r\n\r\n  export interface IArticleSeries {\r\n    id: string;\r\n    doc: DArticleSeries;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the articles\r\n *\r\n */\r\nexport namespace MArticle {\r\n  export interface SArticle {\r\n    docID: string; // UUID max length of 36\r\n    title: string; // Article title max length of 255\r\n  }\r\n\r\n  export interface DArticle {\r\n    title: string; // Article title max length of 255\r\n    subTitle: string; // Article sub title max length of 255\r\n    body: string; // Article body max length of 65535\r\n    coverImage: string; // URL max length of 255\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    writer: MUser.SUser;\r\n    readTimeInMin: number; // FloatField\r\n    articleSeries: MArticleSeries.SArticleSeries | null;\r\n    canPublishStory: boolean;\r\n  }\r\n\r\n  export interface IArticle {\r\n    id: string;\r\n    doc: DArticle;\r\n    likesCount?: number;\r\n    commentsCount?: number;\r\n    topics?:MTopic.STopic[];\r\n  }\r\n}\r\n/**\r\n *\r\n * For the article comments\r\n *\r\n */\r\nexport namespace MArticleComment {\r\n  export interface SArticleComment {\r\n    docID: string; // UUID max length of 36\r\n  }\r\n\r\n  export interface DArticleComment {\r\n    body: string; // Article body max length of 65535\r\n    createdAt: Date; // DateField\r\n    updatedAt: Date; // DateField\r\n    commentedBy: MUser.SUser;\r\n    article: MArticle.SArticle;\r\n    writer: MUser.SUser; // article writer\r\n    parentComment: MArticleComment.SArticleComment | null;\r\n  }\r\n\r\n  export interface IArticleComment {\r\n    id: string;\r\n    doc: DArticleComment;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the article likes\r\n *\r\n */\r\nexport namespace MArticleLike {\r\n  export type likesStatus = 'LIKED' | 'DISLIKED';\r\n  export enum ENUM_likesStatus {\r\n    LIKED = 'LIKED',\r\n    DISLIKED = 'DISLIKED',\r\n  }\r\n\r\n  export interface DArticleLike {\r\n    likedBy: MUser.SUser;\r\n    article: MArticle.SArticle;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    status: likesStatus; // ENUM FLAG\r\n  }\r\n\r\n  export interface IArticleLike {\r\n    id: string;\r\n    doc: DArticleLike;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the saved articles\r\n *\r\n */\r\n\r\nexport namespace MSavedArticle {\r\n  export interface DSavedArticle {\r\n    article: MArticle.SArticle;\r\n    savedBy: MUser.SUser;\r\n    writer: MUser.SUser; // article writer\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n  }\r\n\r\n  export interface ISavedArticle {\r\n    id: string;\r\n    doc: DSavedArticle;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the article readers\r\n *\r\n */\r\nexport namespace MArticleReader {\r\n  export interface DArticleReader {\r\n    article: MArticle.SArticle;\r\n    reader: MUser.SUser;\r\n    writer: MUser.SUser; // article writer\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    readTimeInMin: number; // FloatField\r\n    articleTimeInMin: number; // FloatField\r\n    isLive: boolean;\r\n  }\r\n\r\n  export interface IArticleReader {\r\n    id: string;\r\n    doc: DArticleReader;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the badge challenges\r\n *\r\n */\r\nexport namespace MBadgeChallenge {\r\n  export type badgeStatus = 'PENDING' | 'COMPLETED' | 'FAILED';\r\n  export enum ENUM_badgeStatus {\r\n    PENDING = 'PENDING',\r\n    COMPLETED = 'COMPLETED',\r\n    FAILED = 'FAILED',\r\n  }\r\n\r\n  export interface DBadgeChallenge {\r\n    participant: MUser.SUser;\r\n    badge: MBadge.SBadge;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    status: badgeStatus; // ENUM FLAG\r\n  }\r\n\r\n  export interface IBadgeChallenge {\r\n    id: string;\r\n    doc: DBadgeChallenge;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the user relationships\r\n *\r\n */\r\nexport namespace MUserRelationship {\r\n  export interface STrend {\r\n    boostPoint: number; // FloatField\r\n    resetDate: Date; // DateField\r\n  }\r\n\r\n  export interface DUserRelationship {\r\n    fromUser: MUser.SUser;\r\n    toUser: MUser.SUser;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    fromTrend: STrend;\r\n    toTrend: STrend;\r\n  }\r\n\r\n  export interface IUserRelationship {\r\n    id: string;\r\n    doc: DUserRelationship;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the user topic relationships\r\n *\r\n */\r\nexport namespace MUserTopicRelationship {\r\n  export interface STrend {\r\n    boostPoint: number; // FloatField\r\n    resetDate: Date; // DateField\r\n  }\r\n\r\n  export interface DUserTopicRelationship {\r\n    user: MUser.SUser;\r\n    topic: MTopic.STopic;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    trend: STrend;\r\n    isStable: boolean;\r\n  }\r\n\r\n  export interface IUserTopicRelationship {\r\n    id: string;\r\n    doc: DUserTopicRelationship;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the article topics relationships\r\n *\r\n */\r\nexport namespace MArticleTopicRelationship {\r\n  export interface STrend {\r\n    boostPoint: number; // FloatField\r\n    resetDate: Date; // DateField\r\n  }\r\n\r\n  export interface DArticleTopicRelationship {\r\n    article: MArticle.SArticle;\r\n    topic: MTopic.STopic;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    trend: STrend;\r\n  }\r\n\r\n  export interface IArticleTopicRelationship {\r\n    id: string;\r\n    doc: DArticleTopicRelationship;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the user relation suggestion\r\n *\r\n */\r\nexport namespace MUserRelationSuggestion {\r\n  export interface DUserRelationSuggestion {\r\n    for: MUser.SUser; // this is suggestion for this user\r\n    user: MUser.SUser; // suggest this user\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    impressionCount: number; // IntegerField\r\n    boostPoint: number; // FloatField\r\n    isStale: boolean; //  BooleanField\r\n  }\r\n\r\n  export interface IUserRelationSuggestion {\r\n    id: string;\r\n    doc: DUserRelationSuggestion;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the article relation suggestion\r\n */\r\nexport namespace MArticleRelationSuggestion {\r\n  export interface DArticleRelationSuggestion {\r\n    for: MUser.SUser; // this is suggestion for this user\r\n    article: MArticle.SArticle;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    impressionCount: number; // IntegerField\r\n    boostPoint: number; // FloatField\r\n    isStale: boolean;\r\n  }\r\n\r\n  export interface IArticleRelationSuggestion {\r\n    id: string;\r\n    doc: DArticleRelationSuggestion;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the user activity\r\n *\r\n */\r\nexport namespace MUserActivity {\r\n  type activityAction = 'LIKE' | 'READ' | 'COMMENT' | 'SAVE' | 'CREATE' | 'DISLIKE' | 'JOINED';\r\n  export enum ENUM_activityAction {\r\n    LIKE = 'LIKE',\r\n    READ = 'READ',\r\n    COMMENT = 'COMMENT',\r\n    SAVE = 'SAVE',\r\n    CREATE = 'CREATE',\r\n    DISLIKE = 'DISLIKE',\r\n    JOINED = 'JOINED',\r\n  }\r\n\r\n  export interface DUserActivity {\r\n    user: MUser.SUser;\r\n    article: MArticle.SArticle;\r\n    action: activityAction;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n  }\r\n\r\n  export interface IUserActivity {\r\n    id: string;\r\n    doc: DUserActivity;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the user notification\r\n *\r\n */\r\nexport namespace MUserNotification {\r\n  export type notificationTopic = 'LIKE' | 'COMMENT' | 'FOLLOW' | 'MENTION' | 'GENERAL';\r\n  export type notificationOriginator = 'TABNODE' | 'USER';\r\n  export enum ENUM_notificationTopic {\r\n    LIKE = 'LIKE',\r\n    COMMENT = 'COMMENT',\r\n    FOLLOW = 'FOLLOW',\r\n    MENTION = 'MENTION',\r\n    GENERAL = 'GENERAL',\r\n  }\r\n\r\n  export interface SOriginator {\r\n    fullName: string;\r\n    type: notificationOriginator;\r\n    profilePic: string;\r\n    docID: string;\r\n    aboutMe: string;\r\n  }\r\n\r\n  export interface DUserNotification {\r\n    user: MUser.SUser;\r\n    title: string;\r\n    notification: string;\r\n    originator: SOriginator;\r\n    link: string; // URL Max  length of 255\r\n    isRead: boolean;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    topic: notificationTopic; // ENUM FLAG\r\n  }\r\n\r\n  export interface IUserNotification {\r\n    id: string;\r\n    doc: DUserNotification;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the drafted articles\r\n *\r\n */\r\nexport namespace MDraftedArticle {\r\n  export interface DDraftedArticle {\r\n    article: MArticle.DArticle;\r\n    originalArticle: MArticle.SArticle | null;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n  }\r\n\r\n  export interface IDraftedArticle {\r\n    id: string;\r\n    doc: DDraftedArticle;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the article stories\r\n *\r\n */\r\nexport namespace MArticleStory {\r\n  export interface SArticleStory {\r\n    docID: string; // UUIDField max  length of 36\r\n  }\r\n\r\n  export interface DArticleStory {\r\n    article: MArticle.SArticle;\r\n    story: {\r\n      backgroundImage: string; // URL max length of 255\r\n      summery: string; // Article summery max length of 500\r\n    };\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    expireAt: Date;\r\n    user: MUser.SUser; // story owner\r\n  }\r\n\r\n  export interface IArticleStory {\r\n    id: string;\r\n    doc: DArticleStory;\r\n  }\r\n}\r\n/**\r\n *\r\n * For the article distribution\r\n *\r\n */\r\nexport namespace MArticleStoryDistribution {\r\n  export interface DArticleStoryDistribution {\r\n    for: MUser.SUser;\r\n    story: MArticleStory.SArticleStory;\r\n    boostPoint: number;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    expireAt: Date;\r\n    isSeen: boolean;\r\n  }\r\n\r\n  export interface IArticleStoryDistribution {\r\n    id: string;\r\n    doc: DArticleStoryDistribution;\r\n    story?: MArticleStory.IArticleStory;\r\n  }\r\n}\r\n\r\n/** For the user social links */\r\nexport namespace MUserSocialLink {\r\n  export interface DUserSocialLink {\r\n    user: MUser.SUser;\r\n    socialLink: string; // URL max  length of 255\r\n    type: 'WEB' | 'TWITTER' | 'INSTAGRAM' | 'LINKEDIN' | 'GITHUB';\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n  }\r\n\r\n  export interface IUserSocialLink {\r\n    id: string;\r\n    doc: DUserSocialLink;\r\n  }\r\n}\r\n\r\n/** For the articles distribution */\r\nexport namespace MArticleDistribution {\r\n  export type trackOrderType = 'DATE_ASC' | 'DATE_DESC';\r\n  export enum enum_trackOrderType {\r\n    DATE_ASC = 'DATE_ASC',\r\n    DATE_DESC = 'DATE_DESC',\r\n  }\r\n\r\n  export enum enum_articlePhase {\r\n    'PHASE_1' = 10,\r\n    'PHASE_2' = 30,\r\n    'PHASE_3' = 60,\r\n  }\r\n  export interface DArticleDistribution {\r\n    phase: number; // like 1, 2, 3, ...\r\n    among: string; // example 20_345 , where 20 is 20 percent and its actual amount is 345 because this property is never involved in sorting so string value use phase for sorting if needed\r\n    boostPoint: number;\r\n    // impression count is total number of times the article is seen the user ( may or may not clicked )\r\n    // there is impression threshold, after that the article will be marked stale by the tabnode and will not be distributed for next phase ( currently impression threshold is 100%. if all the target user have seen this article then marked as stale if not distributed to next phase )\r\n    // but before impression threshold if the distribution boost point is greater then certain limit then article will be distribution for next phase\r\n    impressionCount: number;\r\n    trackOrder: trackOrderType;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    isStale: boolean; // stale if the article is distributed for the next phase or reached the impression threshold\r\n    article: MArticle.SArticle;\r\n    // there is one to one mapping of topicsIDS and lastUserIDS\r\n    // topicIDS --> [ topicid1, topicid2, topicid3, .... ] --> attach index at the end for sorting like --> [ topicid1__1, topicid1__2, topicid1__3, ....  ]\r\n    // lastUserIDS --> [ userid1, userid2, userid3, .... ] --> attach index at the end for sorting like --> [ userid1__1, userid1__2, userid1__3, ....  ]\r\n    topicIDS: string[];\r\n    lastUserIDS: string[];\r\n  }\r\n\r\n  export interface IArticleDistribution {\r\n    id: string;\r\n    doc: DArticleDistribution;\r\n  }\r\n}\r\n","export abstract class ArticleBoostPoints {\r\n  static readonly like = 1;\r\n  static readonly dislike = -2;\r\n  static readonly comment = 5;\r\n  static readonly read = 6;\r\n  static readonly click = 1;\r\n  static readonly share = 3;\r\n  static readonly save = 5;\r\n  static readonly create = 10;\r\n}\r\n\r\nexport abstract class UserBoostPoints {\r\n  static readonly read = 5;\r\n  static readonly click = 1;\r\n  static readonly like = 2;\r\n  static readonly dislike = 2;\r\n  static readonly comment = 5;\r\n  static readonly share = 3;\r\n  static readonly save = 5;\r\n  static readonly create = 10;\r\n}\r\n\r\nexport namespace AWFunction {\r\n  export type httpStatusCodes = 200 | 400 | 401 | 403 | 404 | 500;\r\n\r\n  export interface Req {\r\n    headers: any; // request headers\r\n    payload: any;\r\n    variables: {\r\n      APPWRITE_FUNCTION_ID: string;\r\n      APPWRITE_FUNCTION_NAME: string;\r\n      APPWRITE_FUNCTION_DEPLOYMENT: string;\r\n      APPWRITE_FUNCTION_TRIGGER: \"event\" | \"http\" | \"schedule\";\r\n      APPWRITE_FUNCTION_RUNTIME_NAME: string;\r\n      APPWRITE_FUNCTION_RUNTIME_VERSION: string;\r\n      APPWRITE_FUNCTION_EVENT: string;\r\n      APPWRITE_FUNCTION_EVENT_DATA: any;\r\n      APPWRITE_FUNCTION_DATA: any;\r\n      APPWRITE_FUNCTION_PROJECT_ID: string;\r\n      APPWRITE_FUNCTION_USER_ID: string;\r\n      APPWRITE_FUNCTION_JWT: string;\r\n      APPWRITE_API_KEY: string;\r\n      APPWRITE_PROJECT_ID: string;\r\n      APPWRITE_ENDPOINT: string;\r\n      APPWRITE_DATABASE_ID: string;\r\n      APPWRITE_FUNCTION_ENDPOINT: string;\r\n      APPWRITE_FUNCTION_API_KEY: string;\r\n    };\r\n  }\r\n\r\n  export interface Res {\r\n    send: (text: string, status: httpStatusCodes) => void;\r\n    json: (obj: any, status: httpStatusCodes) => void;\r\n  }\r\n}\r\n","import { MArticleDistribution } from './database-types';\r\nimport { ArticleBoostPoints } from './function-type';\r\n\r\n/** Is pure JSON Object */\r\nfunction isPureJSONObject(value: any) {\r\n    return typeof value === 'object' && value !== null && !Array.isArray(value) && Object.prototype.toString.call(value) === '[object Object]';\r\n}\r\n\r\n/** Convert the data to appwrite  */\r\nexport function serializeAppwriteData(data: Record<string, any>, keyStr: string = ''): Record<string, any> {\r\n    // remove $attribute from the data\r\n    const newData: any = {};\r\n    Object.keys(data).forEach((p) => {\r\n        if (!/\\$/.test(p)) {\r\n            newData[p] = data[p];\r\n        }\r\n    });\r\n\r\n    data = newData;\r\n\r\n    const result: Record<string, any> = {};\r\n\r\n    for (const key of Object.keys(data)) {\r\n        const value = data[key];\r\n        if (isPureJSONObject(value)) {\r\n            const finalResult = serializeAppwriteData(value, `${keyStr}${key}_`);\r\n            Object.assign(result, finalResult);\r\n        } else {\r\n            result[`${keyStr}${key}`] = value;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Deserialize the data from appwrite*/\r\nexport function deserializeAppwriteData(serializedData: Record<string, any>): Record<string, any> {\r\n    const result: Record<string, any> = {};\r\n\r\n    for (const key of Object.keys(serializedData)) {\r\n        const value = serializedData[key];\r\n        const keys = key.split('_');\r\n\r\n        let currentObj = result;\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const currentKey = keys[i];\r\n            if (i === keys.length - 1) {\r\n                currentObj[currentKey] = isValidDateString(value) ? new Date(value) : value;\r\n            } else {\r\n                if (!currentObj[currentKey] || !isPureJSONObject(currentObj[currentKey])) {\r\n                    currentObj[currentKey] = {};\r\n                }\r\n                currentObj = currentObj[currentKey];\r\n            }\r\n        }\r\n    }\r\n\r\n    const finalData = { id: serializedData['$id'], doc: result };\r\n    return finalData;\r\n}\r\n\r\n/** Generate the new unique avatar*/\r\nexport function generateAvatar(email: string) {\r\n    return `https://robohash.org/${email}.png`;\r\n}\r\n\r\n/** Appwrite nodejs error reporting */\r\n/** Central Appwrite Error Reporting */\r\n\r\n/** Get the different threshold for different phase boost point */\r\nexport function getThreshold(phase: number, users: number) {\r\n    const mainUser = Math.floor((users * 15) / 100); // 15 percentage of user did some actions\r\n    const boostPoint = mainUser * (ArticleBoostPoints.click + ArticleBoostPoints.comment + ArticleBoostPoints.like + ArticleBoostPoints.read + ArticleBoostPoints.share);\r\n    return { impressionCountPercent: 70, boostPoint: Math.floor(boostPoint) };\r\n}\r\n\r\n/** Get total number of users for the AB testing */\r\nexport function getUsersCountForArticleSuggestion(phase: number, totalUsers: number) {\r\n    switch (phase) {\r\n        case 1:\r\n            return Math.floor((MArticleDistribution.enum_articlePhase.PHASE_1 * totalUsers) / 100);\r\n\r\n        case 2:\r\n            return Math.floor((MArticleDistribution.enum_articlePhase.PHASE_2 * totalUsers) / 100);\r\n\r\n        case 3:\r\n            return Math.floor((MArticleDistribution.enum_articlePhase.PHASE_3 * totalUsers) / 100);\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\n/** Get the phase users in percentage for the AB testing  */\r\nexport function getPhaseUsersPercentage(phase: number) {\r\n    switch (phase) {\r\n        case 1:\r\n            return MArticleDistribution.enum_articlePhase.PHASE_1;\r\n\r\n        case 2:\r\n            return MArticleDistribution.enum_articlePhase.PHASE_2;\r\n\r\n        case 3:\r\n            return MArticleDistribution.enum_articlePhase.PHASE_3;\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nexport function isValidDateString(dateString: string): boolean {\r\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}[+-]\\d{2}:\\d{2}$/;\r\n    return dateRegex.test(dateString);\r\n}\r\n\r\nexport function getHumanReadableDate(date: Date): string {\r\n    const now = new Date();\r\n    const diff = Math.floor((now.getTime() - date.getTime()) / 1000); // Get time difference in seconds\r\n\r\n    if (diff < 60) {\r\n        return `${diff} seconds ago`;\r\n    } else if (diff < 3600) {\r\n        const minutes = Math.floor(diff / 60);\r\n        return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;\r\n    } else if (diff < 86400) {\r\n        const hours = Math.floor(diff / 3600);\r\n        return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\r\n    } else {\r\n        const days = Math.floor(diff / 86400);\r\n        return `${days} ${days === 1 ? 'day' : 'days'} ago`;\r\n    }\r\n}\r\n\r\nexport function calculateReadingTime(content: string, wordsPerMinute: number = 200): number {\r\n    const words = content.trim().split(/\\s+/).length;\r\n    const readingTime = Math.ceil(words / wordsPerMinute);\r\n    return readingTime;\r\n}\r\n"],"names":["MArticleLike","MBadgeChallenge","MUserActivity","MUserNotification","MArticleDistribution"],"mappings":"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"}